#include <WiFi.h>
#include <WebServer.h>

const char* ssid = "Jared";
const char* password = "87654321";

const int ledPin1 = 19;  // LED 1 (top)
const int ledPin2 = 18;  // LED 2
const int ledPin3 = 5;   // LED 3 (center)
const int ledPin4 = 17;  // LED 4
const int ledPin5 = 16;  // LED 5 (bottom)

WebServer server(80);


bool alternateAllActive = false; 
unsigned long previousMillis = 0;
const unsigned long interval = 300; 
bool patternA = true;  


bool centerActive = false;     
unsigned long centerPreviousMillis = 0;
const unsigned long centerInterval = 300;
const int centerSequence[] = { ledPin3, ledPin4, ledPin5, ledPin2, ledPin1 };
const int sequenceSteps = sizeof(centerSequence) / sizeof(centerSequence[0]);
int currentStep = 0;          
int sequenceDirection = 1;   

void handleRoot() {
  // HTML content with buttons (existing plus new button for center pattern)
  String html = "<!DOCTYPE html><html><head><title>ESP32 LED Control</title></head><body>";
  html += "<h1>ESP32 LED Control</h1>";
  html += "<button onclick=\"fetch('/off').then(response => alert('LED OFF!'))\">Turn LED OFF</button><br>";
  html += "<button onclick=\"fetch('/allon').then(response => alert('All LEDs ON!'))\">Turn ALL LEDs ON!</button><br>";
  html += "<button onclick=\"fetch('/alternateall').then(response => alert('Alternating All LEDs!'))\">Alternate All LEDs</button><br>";
  html += "<button onclick=\"fetch('/center').then(response => alert('Center-to-Bottom Versa Activated!'))\">Center-to-Bottom Versa</button><br>";
  html += "</body></html>";
  
  server.send(200, "text/html", html);
}

void handleOn() {
  digitalWrite(ledPin1, HIGH);
  server.send(200, "text/plain", "LED is ON");
}

void handleOff() {
  // Turn off all alternating routines and all LEDs.
  alternateAllActive = false;
  centerActive = false;
  
  digitalWrite(ledPin1, LOW);
  digitalWrite(ledPin2, LOW);
  digitalWrite(ledPin3, LOW);
  digitalWrite(ledPin4, LOW);
  digitalWrite(ledPin5, LOW);
  
  server.send(200, "text/plain", "LEDs are OFF");
}

void handleAllOn() {
  // Turn off alternating routines and turn on all LEDs.
  alternateAllActive = false;
  centerActive = false;
  
  digitalWrite(ledPin1, HIGH);
  digitalWrite(ledPin2, HIGH);
  digitalWrite(ledPin3, HIGH);
  digitalWrite(ledPin4, HIGH);
  digitalWrite(ledPin5, HIGH);
  
  server.send(200, "text/plain", "All LEDs are ON");
}

void handleAlternateAll() {
  alternateAllActive = true;
  centerActive = false;  
  previousMillis = millis();  
  patternA = true;             
  
  server.send(200, "text/plain", "Starting continuous alternating routine on all LEDs");
}

void handleCenter() {
 
  centerActive = true;
  alternateAllActive = false;  
  centerPreviousMillis = millis(); 
  currentStep = 0;            
  sequenceDirection = 1;      
  
  server.send(200, "text/plain", "Starting center-to-bottom versa routine on all LEDs");
}

void setup() {
  Serial.begin(115200);
  
  pinMode(ledPin1, OUTPUT);
  pinMode(ledPin2, OUTPUT);
  pinMode(ledPin3, OUTPUT);
  pinMode(ledPin4, OUTPUT);
  pinMode(ledPin5, OUTPUT);

  // Initially, turn all LEDs off.
  digitalWrite(ledPin1, LOW);
  digitalWrite(ledPin2, LOW);
  digitalWrite(ledPin3, LOW);
  digitalWrite(ledPin4, LOW);
  digitalWrite(ledPin5, LOW);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");
  Serial.println(WiFi.localIP());

  server.on("/", handleRoot);
  server.on("/on", handleOn);
  server.on("/off", handleOff);
  server.on("/allon", handleAllOn);
  server.on("/alternateall", handleAlternateAll);
  server.on("/center", handleCenter);  // new endpoint for center-to-bottom versa
  
  server.begin();
  Serial.println("HTTP server started");
}

void loop() {
  server.handleClient();
  
  if (alternateAllActive) {
    unsigned long currentMillis = millis();
    if (currentMillis - previousMillis >= interval) {
      previousMillis = currentMillis;
      
      if (patternA) {
        // Pattern A: LEDs 1,3,5 ON; LEDs 2,4 OFF.
        digitalWrite(ledPin1, HIGH);
        digitalWrite(ledPin2, LOW);
        digitalWrite(ledPin3, HIGH);
        digitalWrite(ledPin4, LOW);
        digitalWrite(ledPin5, HIGH);
      } else {
        // Pattern B: LEDs 2,4 ON; LEDs 1,3,5 OFF.
        digitalWrite(ledPin1, LOW);
        digitalWrite(ledPin2, HIGH);
        digitalWrite(ledPin3, LOW);
        digitalWrite(ledPin4, HIGH);
        digitalWrite(ledPin5, LOW);
      }
      
      patternA = !patternA;
    }
  }
  
  if (centerActive) {
    unsigned long currentMillis = millis();
    if (currentMillis - centerPreviousMillis >= centerInterval) {
      centerPreviousMillis = currentMillis;
      
      digitalWrite(ledPin1, LOW);
      digitalWrite(ledPin2, LOW);
      digitalWrite(ledPin3, LOW);
      digitalWrite(ledPin4, LOW);
      digitalWrite(ledPin5, LOW);
      
      digitalWrite(centerSequence[currentStep], HIGH);
      
      currentStep += sequenceDirection;
      
      if (currentStep >= sequenceSteps) {
        currentStep = sequenceSteps - 2; // step back into range
        sequenceDirection = -1;
      } else if (currentStep < 0) {
        currentStep = 1; // step forward into range
        sequenceDirection = 1;
      }
    }
  }
}
